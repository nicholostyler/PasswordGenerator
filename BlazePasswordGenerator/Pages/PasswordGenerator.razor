@using BlazePasswordGenerator.Helpers
@inject IJSRuntime JSRuntime

@if (showAlert)
{
	<div class="alert alert-success" role="alert">
		Password copied to clipboard!
	</div>
}


<div class="container">
	<h2>Password Generator</h2>
	<div class="result-container">
		<span id="result">@generatedPassword</span>
		<button class="btn" id="clipboard" @onclick=CopyTextToClipboard>
			<i class="fa fa-clipboard"></i>
		</button>
	</div>

	<div class="settings">
		<div class="setting">
			<label>Length is @passwordInput</label>
			<input class="multi-range" type="range" id="length" max='20' min="1" step="1" @bind="passwordInput" @bind:event="oninput" />
		</div>
		<div class="setting">
			<label >Include uppercase letters</label> 
			<input type="checkbox" id="uppercase" @bind="includeUpper" />
		</div>

		<div class="setting">
			<label>Include numbers</label> 
			<input type="checkbox" class="chk" @bind="includeNumbers" />
		</div>
		<div class="setting">
			<label>Include symbols</label> 
			<input type="checkbox" id="chk" @bind="includeSymbols" />
		</div>
	</div>
	<button class="btn btn-large" id="chk" @onclick="GeneratePassword">
		Generate password
	</button>
</div>

@code {
	string generatedPassword = string.Empty;
	bool showAlert = false;
	string passwordInput = "4";
	bool includeUpper = false;
	//bool includeLower = false;
	bool includeNumbers = false;
	bool includeSymbols = false;
	RandomHelper helper = new RandomHelper();

	private void GeneratePassword()
	{
		generatedPassword = string.Empty;
		List<string> filters = new List<string>();
		int passwordLength = Convert.ToInt32(passwordInput);

		filters.Add("lower");

		if (includeUpper)
		{
			filters.Add("upper");
		}
		if (includeNumbers)
		{
			filters.Add("numbers");
		}
		if (includeSymbols)
		{
			filters.Add("symbols");
		}

		generatedPassword = helper.GeneratePassword(filters, passwordLength);

	}

	private async Task CopyTextToClipboard()
	{
		// call javascript runtime invoker 
		showAlert = true;
		await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", generatedPassword);
		await Task.Delay(4000);
		showAlert = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("popover");
		}
	}
}
